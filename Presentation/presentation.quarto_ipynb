{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"GenAI: Success and Challenge\"\n",
        "author: \"Jaykumar Patel\"\n",
        "format: \n",
        "  revealjs:\n",
        "    embed-resources: true\n",
        "    scrollable: true\n",
        "editor: visual\n",
        "---\n",
        "\n",
        "\n",
        "## Agenda\n",
        "\n",
        "# Success\n",
        "\n",
        "## Background\n",
        "\n",
        "## Prompt 1\n",
        "\n",
        "I am creating a Streamlit application where I want to display some stock data. I already have the backend coded in a helper.py. The helper.py file contains a DataRetriever class, and its constructor takes a stock ticker as string input. Then the DataRetriever class has various methods that return data, such as stock price, earnings history, and options data.\n",
        "\n",
        "I want your help in create a main.py which will be the Streamlit application that displays the stock data. This will be a iterative process, where I will tell you a series of tasks that build on each other.\n",
        "\n",
        "Firstly, I don't want everyone to be able to use this application. I want it to be password protected. Using Python, can you write me a Steamlit application where I can enter a custom password that will be used to \"unlock\" the rest of the application? I also don't want the password to be visible when I am typing it on the application.\n",
        "\n",
        "## Result 1\n",
        "\n",
        "Here's a basic `main.py` for your Streamlit application with password protection. It ensures that only users who enter the correct password can access the rest of the app. The password input is hidden while typing.\n"
      ],
      "id": "73da1e49"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import streamlit as st\n",
        "\n",
        "# Define your custom password\n",
        "CORRECT_PASSWORD = \"your_secret_password\"\n",
        "\n",
        "# Streamlit app\n",
        "st.title(\"Stock Data Viewer\")\n",
        "\n",
        "# Password input\n",
        "password = st.text_input(\"Enter Password:\", type=\"password\")\n",
        "\n",
        "# Authenticate user\n",
        "if password == CORRECT_PASSWORD:\n",
        "    st.success(\"Access granted!\")\n",
        "    st.write(\"Now you can proceed with the application.\")\n",
        "else:\n",
        "    if password:\n",
        "        st.error(\"Incorrect password. Please try again.\")"
      ],
      "id": "76e105a6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This setup ensures that:\n",
        "- The password is hidden while typing.\n",
        "- Users see a success message if they enter the correct password.\n",
        "- If the password is incorrect, they get an error message.\n",
        "\n",
        "Let me know the next step you want to add!\n",
        "\n",
        "## Prompt 2\n",
        "\n",
        "Ok, now I want to add a field that takes in the Stock's ticker as input. Can you do that?\n",
        "\n",
        "## Result 2\n",
        "\n",
        "Here's an updated version of `main.py` that includes a field for entering a stock ticker after the correct password is provided:  \n",
        "\n",
        "```python\n",
        "import streamlit as st\n",
        "\n",
        "# Define your custom password\n",
        "CORRECT_PASSWORD = \"your_secret_password\"\n",
        "\n",
        "# Streamlit app\n",
        "st.title(\"Stock Data Viewer\")\n",
        "\n",
        "# Password input\n",
        "password = st.text_input(\"Enter Password:\", type=\"password\")\n",
        "\n",
        "# Authenticate user\n",
        "if password == CORRECT_PASSWORD:\n",
        "    st.success(\"Access granted!\")\n",
        "\n",
        "    # Input for stock ticker\n",
        "    ticker = st.text_input(\"Enter Stock Ticker:\", value=\"\", max_chars=10)\n",
        "\n",
        "    if ticker:\n",
        "        st.write(f\"You entered: {ticker}\")\n",
        "\n",
        "else:\n",
        "    if password:\n",
        "        st.error(\"Incorrect password. Please try again.\")\n",
        "```\n",
        "\n",
        "### Changes:\n",
        "- After entering the correct password, a text input field appears for the stock ticker.\n",
        "- The entered ticker is displayed below the input field.\n",
        "\n",
        "Let me know what you want to add next!\n",
        "\n",
        "## Prompt 3:\n",
        "\n",
        "Great, now I want to display the stock price for the given ticker. In helper.py, the DataRetriever class has a method called getStockPrice that takes the receiver object as an input and returns the stock price. Can you create a DataRetriever object with the specified ticker, get the stock's price, and display it on the app? I also want to ensure that if there is no ticker inputted, then there should be no stock price to display.\n",
        "\n",
        "## Result 3:\n",
        "\n",
        "Here's the updated `main.py` that integrates with `helper.py` to fetch and display the stock price:  \n",
        "\n",
        "```python\n",
        "import streamlit as st\n",
        "from helper import DataRetriever  # Import the DataRetriever class\n",
        "\n",
        "# Define your custom password\n",
        "CORRECT_PASSWORD = \"your_secret_password\"\n",
        "\n",
        "# Streamlit app\n",
        "st.title(\"Stock Data Viewer\")\n",
        "\n",
        "# Password input\n",
        "password = st.text_input(\"Enter Password:\", type=\"password\")\n",
        "\n",
        "# Authenticate user\n",
        "if password == CORRECT_PASSWORD:\n",
        "    st.success(\"Access granted!\")\n",
        "\n",
        "    # Input for stock ticker\n",
        "    ticker = st.text_input(\"Enter Stock Ticker:\", value=\"\", max_chars=10)\n",
        "\n",
        "    if ticker:\n",
        "        try:\n",
        "            # Create DataRetriever object and fetch stock price\n",
        "            data_retriever = DataRetriever(ticker)\n",
        "            stock_price = data_retriever.getStockPrice()\n",
        "\n",
        "            # Display stock price\n",
        "            st.write(f\"**Stock Price for {ticker}:** ${stock_price}\")\n",
        "\n",
        "        except Exception as e:\n",
        "            st.error(f\"Error fetching stock price: {e}\")\n",
        "\n",
        "else:\n",
        "    if password:\n",
        "        st.error(\"Incorrect password. Please try again.\")\n",
        "```\n",
        "\n",
        "### Updates:\n",
        "- Imports `DataRetriever` from `helper.py`.\n",
        "- Creates a `DataRetriever` object using the provided stock ticker.\n",
        "- Calls `getStockPrice()` to retrieve and display the stock price.\n",
        "- Ensures that the stock price is displayed only when a ticker is entered.\n",
        "- Adds error handling in case `getStockPrice()` encounters an issue.\n",
        "\n",
        "Let me know what you want to enhance next! ðŸš€\n"
      ],
      "id": "23e4b8e6"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\patel\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}